{"version":3,"sources":["firebase.js","components/AuthForm.js","routes/Auth.js","components/Sweet.js","components/SweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","authService","getAuth","dbService","getFirestore","storageService","getStorage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Sweet","sweetObj","isOwner","editing","setEditing","text","newSweet","setNewSweet","onDeleteClick","window","confirm","deleteDoc","doc","id","deleteObject","ref","attachmentUrl","toggleEditing","updateDoc","autoFocus","src","alt","faTrash","faPencilAlt","SweetFactory","userObj","sweet","setSweet","attachment","setAttachment","fileInput","useRef","onSumbit","attachmentRef","uid","uuid","uploadString","response","getDownloadURL","current","content","createdAt","Date","now","creatorId","addDoc","collection","htmlFor","faPlus","accept","theFile","files","reader","FileReader","readAsDataURL","onloadend","result","currentTarget","opacity","backgroundImage","faTimes","Home","sweets","setSweets","useEffect","getData","onSnapshot","query","orderBy","snapshot","sweetArray","docs","map","data","marginTop","Profile","refreshUser","displayName","newDisplayName","setNewDisplayName","history","useHistory","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","Router","isLoggedIn","setName","maxWidth","width","margin","exact","path","from","App","init","setInit","setUserObj","onAuthStateChanged","user","currentUser","Boolean","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27883352.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\"; // Import the functions you need from the SDKs you need\r\nimport { getAuth } from \"firebase/auth\"; // 파이어베이스 인증\r\nimport { getFirestore } from \"firebase/firestore\"; // 파이어베이스 데이터베이스\r\nimport { getStorage } from \"firebase/storage\"; // 파이어베이스 이미지 저장할 장소\r\n\r\n// .env에 값을 옮겨 github에 저장 방지\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n}; // Your web app's Firebase configuration\r\n\r\ninitializeApp(firebaseConfig); // Initialize Firebase\r\n\r\nexport const authService = getAuth(); // 인증하여 유저정보 가져오기\r\nexport const dbService = getFirestore(); //파이어스토어 정보 가져오기\r\nexport const storageService = getStorage(); // 스토리지 정보 가져오기\r\n","import {\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n} from \"@firebase/auth\";\r\nimport { authService } from \"firebase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst AuthForm = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const onChange = (e) => {\r\n    const {\r\n      target: { name, value },\r\n    } = e;\r\n    if (name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n  };\r\n\r\n  const toggleAccount = () => setNewAccount((prev) => !prev);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      if (newAccount) {\r\n        await createUserWithEmailAndPassword(authService, email, password); // firebase에 이메일과 비밀번호 저장, 홈페이지에서 확인가능 (F12눌러보면 application탭에 indexedDB의 firebaseLocalStorage에 저장이 된다)\r\n      } else {\r\n        await signInWithEmailAndPassword(authService, email, password);\r\n      }\r\n    } catch (error) {\r\n      // 같은 계정으로 만들려고 하거나 비번이 짧음 등 오류남\r\n      setError(error.message);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit} className=\"container\">\r\n        <input\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"이메일\"\r\n          required\r\n          value={email}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          required\r\n          value={password}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          className=\"authInput authSubmit\"\r\n          type=\"submit\"\r\n          value={newAccount ? \"회원가입\" : \"로그인\"}\r\n        />\r\n        {error && <span className=\"authError\">{error}</span>}\r\n      </form>\r\n      <span className=\"authSwitch\" onClick={toggleAccount}>\r\n        {newAccount ? \"로그인\" : \"회원가입\"}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import {\r\n  GithubAuthProvider,\r\n  GoogleAuthProvider,\r\n  signInWithPopup,\r\n} from \"@firebase/auth\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport AuthForm from \"components/AuthForm\";\r\nimport { authService } from \"firebase\";\r\nimport React from \"react\";\r\n\r\nconst Auth = () => {\r\n  const onSocialClick = async (e) => {\r\n    const {\r\n      target: { name },\r\n    } = e;\r\n    let provider;\r\n    if (name === \"google\") {\r\n      provider = new GoogleAuthProvider(); // 구글 로그인 정보 제공\r\n    } else if (name === \"github\") {\r\n      provider = new GithubAuthProvider(); // 깃헙 로그인 정보 제공\r\n    }\r\n    await signInWithPopup(authService, provider); // 로그인하기 위한 창 띄움\r\n  };\r\n\r\n  return (\r\n    <div className=\"authContainer\">\r\n      <FontAwesomeIcon\r\n        icon={faTwitter}\r\n        color={\"#04AAFF\"}\r\n        size=\"3x\"\r\n        style={{ marginBottom: 30 }}\r\n      />\r\n      <AuthForm />\r\n      <div className=\"authBtns\">\r\n        <button name=\"google\" onClick={onSocialClick} className=\"authBtn\">\r\n          구글로 로그인\r\n          <FontAwesomeIcon icon={faGoogle} />\r\n        </button>\r\n        <button name=\"github\" onClick={onSocialClick} className=\"authBtn\">\r\n          깃허브로 로그인\r\n          <FontAwesomeIcon icon={faGithub} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Auth;\r\n","import { updateDoc, deleteDoc, doc } from \"@firebase/firestore\";\r\nimport { ref, deleteObject } from \"firebase/storage\";\r\nimport { dbService, storageService } from \"firebase\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Sweet = ({ sweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const [newSweet, setNewSweet] = useState(sweetObj.text);\r\n\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"정말로 삭제하시겠습니까?\");\r\n    if (ok) {\r\n      await deleteDoc(doc(dbService, `sweets/${sweetObj.id}`)); // 파이어스토어 데이터 삭제\r\n      await deleteObject(ref(storageService, sweetObj.attachmentUrl)); // storage에서 사진 url을 참고하여 제거가능하다\r\n    }\r\n  };\r\n\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    await updateDoc(doc(dbService, `sweets/${sweetObj.id}`), {\r\n      text: newSweet,\r\n    }); // 파이어스토어 데이터 업데이트\r\n    setEditing(false);\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const {\r\n      target: { value },\r\n    } = e;\r\n    setNewSweet(value);\r\n  };\r\n\r\n  return (\r\n    <li className=\"sweet\">\r\n      {editing ? (\r\n        <>\r\n          {/* 수정 눌렀을 시 실행 */}\r\n          <form onSubmit={onSubmit} className=\"container sweetEdit\">\r\n            <input\r\n              className=\"formInput\"\r\n              autoFocus\r\n              type=\"text\"\r\n              onChange={onChange}\r\n              value={newSweet}\r\n              required\r\n            />\r\n            <input type=\"submit\" value=\"수정하기\" className=\"formBtn\" />\r\n          </form>\r\n          <button onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n            취소\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <span>{sweetObj.text}</span>\r\n          {sweetObj.attachmentUrl && (\r\n            <img src={sweetObj.attachmentUrl} alt=\"이미지 없음\" />\r\n          )}\r\n          {isOwner && (\r\n            <div className=\"sweet__actions\">\r\n              <span onClick={onDeleteClick}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n              </span>\r\n              <span onClick={toggleEditing}>\r\n                <FontAwesomeIcon icon={faPencilAlt} />\r\n              </span>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </li>\r\n  );\r\n};\r\nexport default Sweet;\r\n","import { addDoc, collection } from \"@firebase/firestore\";\r\nimport { ref, uploadString, getDownloadURL } from \"firebase/storage\";\r\nimport { dbService, storageService } from \"firebase\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SweetFactory = ({ userObj }) => {\r\n  const [sweet, setSweet] = useState(\"\");\r\n  const [attachment, setAttachment] = useState(\"\");\r\n\r\n  const fileInput = useRef(null);\r\n\r\n  const onSumbit = async (e) => {\r\n    e.preventDefault();\r\n    let attachmentUrl = \"\";\r\n    if (attachment !== \"\") {\r\n      const attachmentRef = ref(storageService, `${userObj.uid}/${uuid()}`); // ref(storage위치 참조 , 폴더명/이미지 이름)\r\n      const response = await uploadString(\r\n        attachmentRef,\r\n        attachment,\r\n        \"data_url\"\r\n      ); // uploadString 스트링으로 storage에 업로드 한다. (참조대상, 올린 파일이미지, 인코딩된 파일) 인코딩된 파일은 base64, base64url, data_url 중에 하나하고 url로부터 파일 저장하니 data_url 설정\r\n      attachmentUrl = await getDownloadURL(response.ref); // 업로드된 이미지의 url을 가져온다\r\n      fileInput.current.value = null;\r\n    }\r\n\r\n    const content = {\r\n      text: sweet,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      attachmentUrl,\r\n    };\r\n    await addDoc(collection(dbService, \"sweets\"), content); // 파이어베이스의 파이어스토어에 데이터 저장 , userObj.uid는 유저고유id\r\n    setSweet(\"\");\r\n    setAttachment(\"\");\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const {\r\n      target: { value },\r\n    } = e;\r\n    setSweet(value);\r\n  };\r\n\r\n  const onFileChange = (e) => {\r\n    const {\r\n      target: { files },\r\n    } = e;\r\n    const theFile = files[0];\r\n    const reader = new FileReader(); // 읽을 파일의 내용을 읽고 다루게한다. new FileReader()은 인스턴스 생성\r\n    if (theFile) {\r\n      reader.readAsDataURL(theFile); // theFile의 내용을 읽고 끝나면 그 내용을 URL로 저장한다\r\n    }\r\n    reader.onloadend = (e) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = e;\r\n      setAttachment(result); // 이벤트를 통해 readAsDataURL로 저장된 url 경로를 사용\r\n    }; // 읽기 동작이 끝났을 때마다 발생한다\r\n  };\r\n\r\n  const onClearAttachment = () => {\r\n    fileInput.current.value = null; // file input에 남아 있는 이미지 파일명 지우기\r\n    setAttachment(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSumbit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <input\r\n          className=\"factoryInput__input\"\r\n          value={sweet}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"지금 당신이 생각하고 있는 것은 뭔가요?\"\r\n        />\r\n        ``\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n      </div>\r\n      <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\r\n        <span>Add photos</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </label>\r\n      {/* 파일 미리보기하기위해 onChange 사용 */}\r\n      <input\r\n        id=\"attach-file\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={onFileChange}\r\n        ref={fileInput}\r\n        style={{\r\n          opacity: 0,\r\n        }}\r\n      />\r\n\r\n      {attachment && (\r\n        <div className=\"factoryForm__attachment\">\r\n          <img\r\n            src={attachment}\r\n            alt=\"이미지 없음\"\r\n            style={{\r\n              backgroundImage: attachment,\r\n            }}\r\n          />\r\n          <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n            <span>삭제</span>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\nexport default SweetFactory;\r\n","import { collection, onSnapshot, orderBy, query } from \"@firebase/firestore\";\r\nimport Sweet from \"components/Sweet\";\r\nimport { dbService } from \"firebase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport SweetFactory from \"components/SweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [sweets, setSweets] = useState([]);\r\n\r\n  // 새로고침해야 리렌더링이 된다. 참고만 하기\r\n  // const getSweets = async () => {\r\n  //   const dbsweets = await getDocs(collection(dbService, \"sweets\"));\r\n  //   dbsweets.forEach((doc) => {\r\n  //     const sweetObject = {\r\n  //       ...doc.data(),\r\n  //       id: doc.id,\r\n  //     }; // 객체 분해하여 재구성\r\n  //     setSweets((prev) => [sweetObject, ...prev]); // 반복문 이용하여 데이터 호출할때마다 set에 누적 저장\r\n  //   });\r\n  // };\r\n\r\n  useEffect(() => {\r\n    // getSweets();\r\n\r\n    const getData = onSnapshot(\r\n      query(collection(dbService, \"sweets\"), orderBy(\"createdAt\", \"desc\")),\r\n      (snapshot) => {\r\n        const sweetArray = snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        })); // data()를 실행하여 데이터화 하기\r\n        setSweets(sweetArray);\r\n      }\r\n    ); // onSnapshot은 firestore에 create,delete,update될 때마다 실행, query안에 컬렉션 대상과 orderBy넣어 정렬\r\n    return () => getData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <SweetFactory userObj={userObj} />\r\n      <ul style={{ marginTop: 30 }}>\r\n        {sweets.map((sweet) => (\r\n          <Sweet\r\n            key={sweet.id}\r\n            sweetObj={sweet}\r\n            isOwner={sweet.creatorId === userObj.uid}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;\r\n","import { signOut, updateProfile } from \"@firebase/auth\";\r\nimport {\r\n  collection,\r\n  getDocs,\r\n  orderBy,\r\n  query,\r\n  where,\r\n} from \"@firebase/firestore\";\r\nimport { authService, dbService } from \"firebase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Profile = ({ refreshUser, userObj }) => {\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n\r\n  const history = useHistory(); // 화면 이동하게하는 hook\r\n  const onLogOutClick = () => {\r\n    signOut(authService); // 로그아웃\r\n    history.push(\"/\");\r\n  };\r\n\r\n  // 참고만 하기\r\n  // const getMySweets = async () => {\r\n  //   const sweets = await getDocs(\r\n  //     query(\r\n  //       collection(dbService, \"sweets\"),\r\n  //       where(\"creatorId\", \"==\", userObj.uid),\r\n  //       orderBy(\"createdAt\", \"desc\")\r\n  //     )\r\n  //   ); // console.log 확인시 index가 필요하다고 오류가 뜨는데 오류문에 보면 링크를 클릭시 index를 자동생성해준다\r\n  //   console.log(sweets.docs);\r\n  // };\r\n  // useEffect(() => {\r\n  //   getMySweets();\r\n  // }, []);\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await updateProfile(userObj, { displayName: newDisplayName }); // updateProfile은 유저의 이름과 photoURL만 변경가능, 유저 이름 변경하기\r\n    }\r\n    refreshUser();\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const {\r\n      target: { value },\r\n    } = e;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={onSubmit} className=\"profileForm\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"이름 표시\"\r\n          autoFocus\r\n          onChange={onChange}\r\n          value={newDisplayName}\r\n          className=\"formInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"프로필 수정\"\r\n          className=\"formBtn\"\r\n          style={{\r\n            marginTop: 10,\r\n          }}\r\n        />\r\n      </form>\r\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n        로그아웃\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({ userObj }) => {\r\n  return (\r\n    <nav>\r\n      <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n        <li>\r\n          <Link to=\"/\" style={{ marginRight: 10 }}>\r\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link\r\n            to=\"/profile\"\r\n            style={{\r\n              marginLeft: 10,\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n              fontSize: 12,\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n            <span style={{ marginTop: 10 }}>\r\n              {userObj.displayName\r\n                ? `${userObj.displayName}의 프로필`\r\n                : \"프로필\"}\r\n            </span>\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Profile from \"routes/Profile\";\r\nimport Navigation from \"components/Navigation\";\r\n\r\nfunction Router({ refreshUser, isLoggedIn, userObj, setName }) {\r\n  return (\r\n    <HashRouter>\r\n      {/* 로그인 했으면 홈과 프로필 뜨게함 */}\r\n      {isLoggedIn && <Navigation userObj={userObj} setName={setName} />}\r\n      <Switch>\r\n        <>\r\n          {isLoggedIn ? (\r\n            <div\r\n              style={{\r\n                maxWidth: 890,\r\n                width: \"100%\",\r\n                margin: \"0 auto\",\r\n                marginTop: 80,\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              {/* 로그인 시 홈과 프로필로 이동하가능하게 설정 */}\r\n              <Route exact path=\"/\">\r\n                <Home userObj={userObj} />\r\n              </Route>\r\n              <Route exact path=\"/profile\">\r\n                <Profile userObj={userObj} refreshUser={refreshUser} />\r\n              </Route>\r\n              <Redirect from=\"*\" to=\"/\" />\r\n            </div>\r\n          ) : (\r\n            <>\r\n              {/* <Route component={Auth}/> 와 같다 */}\r\n              {/* 로그인 안했을 시 로그인 접속 창뜨게 함 */}\r\n              <Route exact path=\"/\">\r\n                <Auth />\r\n              </Route>\r\n              <Redirect from=\"*\" to=\"/\" />\r\n            </>\r\n          )}\r\n        </>\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default Router;\r\n","import React, { useEffect, useState } from \"react\";\nimport { authService } from \"firebase\";\nimport Router from \"components/Router\";\nimport { onAuthStateChanged } from \"@firebase/auth\";\n\nfunction App() {\n  const [init, setInit] = useState(false); // 유저정보 가져올 때까지 초기화\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    onAuthStateChanged(authService, (user) => {\n      if (user) {\n        setUserObj(user);\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    }); // 유저 변화가 있을 때 실행된다. 즉 로그아웃이나 계정생성등 아니면 파이어베이스가 초기화될 때도 실행된다. authService를 통해 파이어베이스로부터 유저정보를 가져와서 user에 정보가 있으면 로그인\n  }, []);\n\n  const refreshUser = () => {\n    const user = authService.currentUser; // currentUser는 현재 로그인한 유저 정보 가져옴\n    setUserObj({ displayName: user.displayName }); // 현재 displayName의 수정, 만약 setUserObj(user)를 넣었을 경우 displayName만 바뀌었지만 내용이 워낙 방대해 리렌더링이 안된다. 그래서 displayName만 변경\n  };\n\n  return (\n    <>\n      {init ? (\n        <Router\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n        />\n      ) : (\n        \"초기화 중...\"\n      )}\n      <footer>&copy; {new Date().getFullYear()} Switter</footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}